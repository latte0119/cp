{
	"CentroidDecomposition":{
		"prefix":"Centroid",
		"body":[
			"struct CentroidDecomposition{",
			"\tint N;",
			"\tvector<vector<int>>G;",
			"\tvector<vector<int>>T;",
			"\tvector<int>used,sz;",
			"\tint r;",
			"\tvoid set(int n){",
			"\t\tN=n;",
			"\t\tG.resize(N);",
			"\t\tT.resize(N);",
			"\t}",
			"\tvoid addEdge(int a,int b){",
			"\t\tG[a].push_back(b);",
			"\t\tG[b].push_back(a);",
			"\t}",
			"",
			"\tint calcSubtreeSize(int v,int p){",
			"\t\tsz[v]=1;",
			"\t\tfor(auto u:G[v]){",
			"\t\t\tif(u==p||used[u])continue;",
			"\t\t\tsz[v]+=calcSubtreeSize(u,v);",
			"\t\t}",
			"\t\treturn sz[v];",
			"\t}",
			"",
			"\tpair<int,int>findCentroid(int v,int p,int ov){",
			"\t\tpair<int,int>ret(N,-1);",
			"\t\tint mx=ov-sz[v];",
			"\t\tfor(auto u:G[v]){",
			"\t\t\tif(u==p||used[u])continue;",
			"\t\t\tret=min(ret,findCentroid(u,v,ov));",
			"\t\t\tmx=max(mx,sz[u]);",
			"\t\t}",
			"\t\tret=min(ret,pair<int,int>(mx,v));",
			"\t\treturn ret;",
			"\t}",
			"",
			"\tvoid dfs(int v,int p){",
			"\t\tcalcSubtreeSize(v,-1);",
			"\t\tv=findCentroid(v,-1,sz[v]).second;",
			"\t\tused[v]=true;",
			"\t\tif(p==-1)r=v;",
			"\t\telse T[p].push_back(v);",
			"\t\tfor(auto u:G[v])if(!used[u])dfs(u,v);",
			"\t}",
			"",
			"\tvoid decompose(){",
			"\t\tused.resize(N);",
			"\t\tsz.resize(N);",
			"\t\tdfs(0,-1);",
			"\t}",
			"",
			"\tinline int root()const{",
			"\t\treturn r;",
			"\t}",
			"\tvector<int>&operator[](int i){",
			"\t\treturn T[i];",
			"\t}",
			"};",
			"CentroidDecomposition ct;",
			"",
		]
	}
}
