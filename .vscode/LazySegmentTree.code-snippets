{
	"LazySegmentTree":{
		"prefix":"lazy",
		"body":[
			"template<class T,class E,class F,class G,class H>",
			"struct LazySegmentTree{",
			"\tF f;",
			"\tG g;",
			"\tH h;",
			"",
			"\tT ti;",
			"\tE ei;",
			"",
			"\tvector<T>dat;",
			"\tvector<E>put;",
			"\tint sz;",
			"\tLazySegmentTree(const T &ti,const E &ei,const F &f,const G &g,const H &h):ti(ti),ei(ei),f(f),g(g),h(h){}",
			"",
			"\tvoid build(const vector<T>&v){",
			"\t\tassert(v.size());",
			"\t\tsz=1;",
			"\t\twhile(sz<v.size())sz<<=1;",
			"\t\tdat.resize(sz<<1,ti);",
			"\t\tput.resize(sz<<1,ei);",
			"\t\tfor(int i=0;i<v.size();i++)dat[sz-1+i]=v[i];",
			"\t\tfor(int i=sz-2;i>=0;i--)dat[i]=f(dat[i*2+1],dat[i*2+2]);",
			"\t}",
			"\tinline void push(int k,int l,int r){",
			"\t\tdat[k]=g(dat[k],put[k],r-l);",
			"\t\tif(k<sz-1){",
			"\t\t\tput[k*2+1]=h(put[k*2+1],put[k]);",
			"\t\t\tput[k*2+2]=h(put[k*2+2],put[k]);",
			"\t\t}",
			"\t\tput[k]=ei;",
			"\t}",
			"",
			"\tvoid modify(int a,int b,E x,int k,int l,int r){",
			"\t\tpush(k,l,r);",
			"\t\tif(r<=a||b<=l)return;",
			"\t\tif(a<=l&&r<=b){",
			"\t\t\tput[k]=x;",
			"\t\t\tpush(k,l,r);",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tmodify(a,b,x,k*2+1,l,(l+r)/2);",
			"\t\tmodify(a,b,x,k*2+2,(l+r)/2,r);",
			"\t\tdat[k]=f(dat[k*2+1],dat[k*2+2]);",
			"\t}",
			"",
			"\tinline void modify(int a,int b,E x){",
			"\t\treturn modify(a,b,x,0,0,sz);",
			"\t}",
			"\tT query(int a,int b,int k,int l,int r){",
			"\t\tpush(k,l,r);",
			"\t\tif(r<=a||b<=l)return ti;",
			"\t\tif(a<=l&&r<=b)return dat[k];",
			"\t\treturn f(query(a,b,k*2+1,l,(l+r)/2),query(a,b,k*2+2,(l+r)/2,r));",
			"\t}",
			"\tinline T query(int a,int b){",
			"\t\treturn query(a,b,0,0,sz);",
			"\t}",
			"};",
		]
	}
}
