{
	"ModInt":{
		"prefix":"ModInt",
		"body":[
			"template<uint32_t mod>",
			"struct ModInt{",
			"\tuint32_t a;",
			"\tModInt& s(uint32_t vv){",
			"\t\ta=vv<mod?vv:vv-mod;",
			"\t\treturn *this;",
			"\t}",
			"",
			"    ModInt(int64_t x=0){s(x%mod+mod);}",
			"",
			"\tModInt& operator+=(const ModInt &x){return s(a+x.a);}",
			"\tModInt& operator-=(const ModInt &x){return s(a+mod-x.a);}",
			"\tModInt& operator*=(const ModInt &x){",
			"\t\ta=uint64_t(a)*x.a%mod;",
			"\t\treturn *this;",
			"\t}",
			"\tModInt& operator/=(const ModInt &x){",
			"\t\t*this*=x.inv();",
			"\t\treturn *this;",
			"\t}",
			"",
			"\tModInt operator+(const ModInt &x)const{return ModInt(*this)+=x;}",
			"\tModInt operator-(const ModInt &x)const{return ModInt(*this)-=x;}",
			"\tModInt operator*(const ModInt &x)const{return ModInt(*this)*=x;}",
			"\tModInt operator/(const ModInt &x)const{return ModInt(*this)/=x;}",
			"\tbool operator==(const ModInt &x)const{return a==x.a;}",
			"\tbool operator!=(const ModInt &x)const{return a!=x.a;}",
			"\tbool operator<(const ModInt &x)const{return a<x.a;}",
			"",
			"\tModInt operator-()const{return ModInt()-*this;}",
			"\tModInt pow(int64_t n)const{",
			"\t\tModInt res(1),x(*this);",
			"\t\twhile(n){",
			"\t\t\tif(n&1)res*=x;",
			"\t\t\tx*=x;",
			"\t\t\tn>>=1;",
			"\t\t}",
			"\t\treturn res;",
			"\t}",
			"",
			"    ModInt inv()const{return pow(mod-2);}",
			"};",
			"",
			"template<uint32_t mod>",
			"istream& operator>>(istream& in,ModInt<mod>& a){",
			"\treturn (in>>a.a);",
			"}",
			"template<uint32_t mod>",
			"ostream& operator<<(ostream& out,const ModInt<mod>& a){",
			"\treturn (out<<a.a);",
			"}",
			"using mint=ModInt<1000000007>;",
			"//using mint=ModInt<998244353>;",
		]
	}
}