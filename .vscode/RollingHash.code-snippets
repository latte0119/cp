{
	"RollingHash":{
		"prefix":"RollingHash",
		"body":[
			"struct ModX{",
			"\tusing ull=uint64_t;",
			"\tstatic const ull mod=(1ll<<61)-1;",
			"\tstatic const ull MASK30=(1ll<<30)-1;",
			"\tstatic const ull MASK31=(1ll<<31)-1;",
			"",
			"\tull a;",
			"",
			"\tModX& s(ull vv){",
			"\t\ta=vv<mod?vv:vv-mod;",
			"\t\treturn *this;",
			"\t}",
			"\tModX(ull a=0):a(a%mod){}",
			"\t",
			"\tModX& operator+=(const ModX& x){return s(a+x.a);}",
			"\tModX& operator-=(const ModX& x){return s(a+mod-x.a);}",
			"\tModX& operator*=(const ModX& x){",
			"\t\tconst ull au=a>>31;",
			"\t\tconst ull ad=a&MASK31;",
			"\t\tconst ull bu=x.a>>31;",
			"\t\tconst ull bd=x.a&MASK31;",
			"\t\tconst ull mid=ad*bu+au*bd;",
			"\t\tconst ull midu=mid>>30;",
			"\t\tconst ull midd=mid&MASK30;",
			"\t\tconst ull z=au*bu*2+midu+(midd<<31)+ad*bd;",
			"\t\treturn s((z&mod)+(z>>61));",
			"\t}",
			"",
			"\tModX operator+(const ModX &x)const{return ModX(*this)+=x;}",
			"\tModX operator-(const ModX &x)const{return ModX(*this)-=x;}",
			"\tModX operator*(const ModX &x)const{return ModX(*this)*=x;}",
			"",
			"\tbool operator==(const ModX &x)const{return a==x.a;}",
			"\tbool operator!=(const ModX &x)const{return a!=x.a;}",
			"\tbool operator<(const ModX &x)const{return a<x.a;}",
			"",
			"\tModX operator-()const{return ModX()-*this;}",
			"};",
			"",
			"istream& operator>>(istream& in,const ModX& a){",
			"\treturn (in>>a.a);",
			"}",
			"",
			"ostream& operator<<(ostream& out,const ModX& a){",
			"\treturn (out<<a.a);",
			"}",
			"using xint=ModX;",
			"const xint base(119);",
			"const int RHSIZE=1111111;",
			"xint basepow[RHSIZE];",
			"struct RHInit{",
			"\tRHInit(){",
			"\t\tbasepow[0]=1;",
			"\t\tfor(int i=1;i<RHSIZE;i++)basepow[i]=basepow[i-1]*base;",
			"\t}",
			"}RHInitDummy;",
		]
	}
}
