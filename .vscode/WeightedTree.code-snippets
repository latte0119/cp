{
	"WeightedTree":{
		"prefix":"Tree",
		"body":[
			"template<class W>",
			"struct WeightedTree{",
			"\tstruct Edge{",
			"\t\tint to;",
			"\t\tW cost;",
			"\t\tEdge(int to,W cost):to(to),cost(cost){}",
			"\t};",
			"",
			"\tint V;",
			"\tint root;",
			"\tvector<vector<Edge>>G;",
			"",
			"\tvector<int>par_,dep_,sz_,head_;",
			"\tvector<int>tin_,tout_,vs_;",
			"\tvector<W>dist_;",
			"\tWeightedTree(int V=0):V(V),G(V),par_(V),sz_(V),dep_(V),head_(V),dist_(V),tin_(V),tout_(V),vs_(V){}",
			"\tvoid set(int v){",
			"\t\t*this=WeightedTree(v);",
			"\t}",
			"",
			"\tvoid addEdge(int a,int b,W c=W(1)){",
			"\t\tG[a].push_back(Edge(b,c));",
			"\t\tG[b].push_back(Edge(a,c));",
			"\t}",
			"",
			"\tvoid dfs(int v,int p,int d,W c){",
			"\t\tpar_[v]=p;",
			"\t\tdep_[v]=d;",
			"\t\tsz_[v]=1;",
			"\t\tdist_[v]=c;",
			"",
			"\t\tfor(auto &e:G[v]){",
			"\t\t\tif(e.to==p)continue;",
			"\t\t\tdfs(e.to,v,d+1,c+e.cost);",
			"\t\t\tsz_[v]+=sz_[e.to];",
			"\t\t\tif(G[v][0].to==p||sz_[e.to]>sz_[G[v][0].to])swap(G[v][0],e);",
			"\t\t}",
			"\t}",
			"",
			"\tvoid dfs_hld(int v,int &tt,int h){",
			"\t\tvs_[tt]=v;",
			"\t\ttin_[v]=tt++;",
			"\t\thead_[v]=h;",
			"\t\tfor(auto &e:G[v]){",
			"\t\t\tif(e.to==par_[v])continue;",
			"\t\t\tdfs_hld(e.to,tt,e.to==G[v][0].to?h:e.to);",
			"\t\t}",
			"\t\ttout_[v]=tt;",
			"\t}",
			"\tvoid init(int r=0){",
			"\t\troot=r;",
			"\t\tdfs(root,-1,0,W(0));",
			"\t\tint tt=0;",
			"\t\tdfs_hld(root,tt,root);",
			"\t}",
			"",
			"\tinline int lca(int u,int v)const{",
			"\t\twhile(head_[u]!=head_[v]){",
			"\t\t\tif(dep_[head_[u]]<dep_[head_[v]])swap(u,v);",
			"\t\t\tu=par_[head_[u]];",
			"\t\t}",
			"\t\treturn dep_[u]<dep_[v]?u:v;",
			"\t}",
			"",
			"\t",
			"\tinline int ancestor(int v,int k){",
			"\t\twhile(v!=-1){",
			"\t\t\tif(dep_[v]-dep_[head_[v]]<k){",
			"\t\t\t\tk-=dep_[v]-dep_[head_[v]]+1;",
			"\t\t\t\tv=par_[head_[v]];",
			"\t\t\t\tcontinue;",
			"\t\t\t}",
			"\t\t\treturn vs_[tin_[v]-k];",
			"\t\t}",
			"\t\treturn -1;",
			"\t}",
			"\t",
			"",
			"\tinline int par(int v)const{",
			"\t\treturn par_[v];",
			"\t}",
			"",
			"\tinline int size(int v)const{",
			"\t\treturn sz_[v];",
			"\t}",
			"\tinline int len(int a,int b=0)const{",
			"\t\tint l=lca(a,b);",
			"\t\treturn dep_[a]+dep_[b]-2*dep_[l];",
			"\t}",
			"\tinline W dist(int a,int b)const{",
			"\t\tint l=lca(a,b);",
			"\t\treturn dist_[a]+dist_[b]-2*dist_[l];",
			"\t}",
			"",
			"\tinline W dist(int a)const{",
			"\t\treturn dist_[a];",
			"\t}",
			"",
			"\tinline int head(int v)const{",
			"\t\treturn head_[v];",
			"\t}",
			"",
			"\tinline int dep(int v)const{",
			"\t\treturn dep_[v];",
			"\t}",
			"\tinline int tin(int v)const{",
			"\t\treturn tin_[v];",
			"\t}",
			"\tinline int tout(int v)const{",
			"\t\treturn tout_[v];",
			"\t}",
			"",
			"\tinline int vs(int k)const{",
			"\t\treturn vs_[k];",
			"\t}",
			"\tinline int heavy(int v)const{",
			"\t\tif(G[v].size()==0||G[v][0].to==par_[v])return -1;",
			"\t\treturn G[v][0].to;",
			"\t}",
			"",
			"\tvector<Edge>& operator[](int i){",
			"\t\treturn G[i];",
			"\t}",
			"};",
			"",
		]
	}
}
